@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@using MudBlazor.Shared.Enums
@using QuickSchedule.Shared.Utilities

<MudField Label=@Label Variant=@Variant ErrorText=@MessageError Error=@Error>
    <MudGrid>
        <MudItem xs="9" md="3" lg="3">
            <MudSelect @bind-Value="_selectedCountry" Label="Cod Pais" Variant="Variant.Text">
                @foreach (var item in Enum.GetValues(typeof(CountryFlagIconEnuns)).Cast<CountryFlagIconEnuns>())
                {
                    <MudSelectItem Value="@item">
                        <img src="@item.GetIcon()" height="14" class="mr-1" /> @item
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="4" md="2" lg="2">
            <MudNumericField HideSpinButtons="true" @bind-Value="DDD" Label="DDD" Variant="Variant.Text" Min="1" />
        </MudItem>
        <MudItem xs="8" md="7" lg="7">
            <MudTextField Class="col-md-7" Label="Telefone"
                          @bind-Value="CurrentContact"
                          OnBlur="OnBlur"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Add"
                          OnAdornmentClick="OnAdornmentClick"
                          AdornmentAriaLabel="Adicionar Contato" Error=@Error />
        </MudItem>
        <MudItem xs="12" md="12" lg="12">
            @if (Value is not null && Value.Any())
            {
                <MudGrid>
                    @foreach (var item in Value.Select((x, index) => new { x, index }))
                    {
                        <MudItem xs="12" md="5" lg="5">
                            @item.x?.ContactValue
                            <MudIconButton Color="Color.Success" OnClick="@(()=>EditContact(item.x!,'W'))" Size="Size.Small" aria-label="WhatsApp">
                                <MudImage Src="@(!item.x!.IsWhatsApp?TypeNumber.WhatsApp24Dark.GetIcon(): TypeNumber.WhatsApp24.GetIcon())" />
                            </MudIconButton> 
                            <MudIconButton Color="Color.Warning" OnClick="@(()=>EditContact(item.x!,'E'))" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="Edit"></MudIconButton>
                            <MudIconButton Color="Color.Error" OnClick="@(()=>EditContact(item.x!))" Size="Size.Small" Icon="@Icons.Material.Filled.Close" aria-label="Close"></MudIconButton>
                        </MudItem>
                    }
                    <MudScrollToTop TopOffset="100" Selector="#another_unique_identifier" Style="z-index:2001;">
                        <div class="mud-theme-secondary px-3 py-6 mud-elevation-16 rounded-xl fixed" style="bottom:20px;left:20px;">Voltar ao topo</div>
                    </MudScrollToTop>
                </MudGrid>
            }
        </MudItem>
    </MudGrid>
</MudField>

@code {
    //[NotEmptyList(ErrorMessage = "Pelo menos um contato é obrigatório.")]
    [Parameter] public List<Contact?>? Value { get; set; } = new List<Contact?>();
    [Parameter] public EventCallback<List<Contact?>> ValueChanged { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public Variant Variant { get; set; } = default!;
    private CountryFlagIconEnuns _selectedCountry { get; set; } = CountryFlagIconEnuns.Brazil;
    private int DDD { get; set; } = 011;
    private bool Error = false;
    private string MessageError = string.Empty;
    private string CurrentContact { get; set; } = string.Empty;

    public async Task OnBlur()
    {
        var validate = await Validate();
        if (!validate && string.IsNullOrEmpty(CurrentContact)) return;
        await AddContact();
    }

    private void OnValueChanged(List<Contact?> newValue)
    {
        Value = newValue;
        ValueChanged.InvokeAsync(newValue);
    }

    public async Task<bool> Validate()
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(this);
        bool isValid = Validator.TryValidateObject(this, validationContext, validationResults, true);

        if (!isValid)
        {
            MessageError = validationResults.FirstOrDefault()?.ErrorMessage ?? "Erro de validação desconhecido.";
            Error = true;
        }
        else
        {
            Error = false;
            MessageError = string.Empty;
        }

        return await Task.FromResult(isValid);
    }

    private async void OnAdornmentClick()
    {
        await AddContact();
    }

    private async Task AddContact()
    {
        if(!string.IsNullOrEmpty(CurrentContact) && (Value is null || !Value!.Any(x => x!.ContactValue == CurrentContact)))
        {
            // Remove qualquer código do país e DDD do número atual
            var number = RemoveCountryCodeAndDDD(_selectedCountry, CurrentContact);
            // Adiciona o novo contato se ele ainda não existir

            if (number.Length == 8 || number.Length == 9)
            {
                number = $"+{Convert.ToInt16(_selectedCountry)}({DDD}){number}";

                if (!Value!.Select(p => p!.ContactValue).Contains(number))
                {
                    if (Value == null) Value = new List<Contact?>();
                    var newContact = new Contact { ContactValue = number, IsActive = true };
                    Value.Add(newContact);
                    await ValueChanged.InvokeAsync(Value);
                    await Validate();
                }
            }

            // Limpa o campo de entrada após adicionar
            CurrentContact = string.Empty;
        }
    }

    private void EditContact(Contact param, char? type = null!)
    {
        if (type == 'E')
        {
            Value!.RemoveAll(p => p!.ContactValue.Equals(param.ContactValue));
            // Remove qualquer código do país e DDD do número editado
            string cleanedNumber = RemoveCountryCodeAndDDD(_selectedCountry, param.ContactValue);
            CurrentContact = param.ContactValue;
        }
        else if (type == 'W')
        {
            Value!.First(p => p!.ContactValue.Equals(param.ContactValue))!.IsWhatsApp = !param.IsWhatsApp;
            StateHasChanged();
        }
        else
            Value!.RemoveAll(p => p!.ContactValue.Equals(param.ContactValue));

    
    }

    // Função para remover o código do país e o DDD do número
    private string RemoveCountryCodeAndDDD(CountryFlagIconEnuns selectedCountry, string phoneNumber)
    {
        if (selectedCountry == CountryFlagIconEnuns.Brazil)
        {
            //var regex = new Regex(@"^(\+?55)?\s?\(?(\d{2})\)?\s?9?\d{4}\d{4}$");
            var regex = new Regex(@"^(\+?55)?\s?\(?(\d{2})\)?\s?(\d{8,9})$");

            if (regex.IsMatch(phoneNumber))
            {
                // Extrair apenas o número de telefone, seja ele móvel (9 dígitos) ou fixo (8 dígitos)
                var match = regex.Match(phoneNumber);
                return match.Groups[3].Value;                
                //Console.WriteLine($"Número limpo: {cleanedNumber}");
            }
        }
        return phoneNumber;
    }


}

