@* @layout Layout.MainLayoutIndex
 *@
 @page "/login"
@using QuickSchedule.Shared.Models
@inject LoginViewModel _loginViewModel


<PageTitle>Login</PageTitle>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Class="d-flex justify-center flex-grow-1 gap-4" Style="margin-top:15vh">
        <MudItem xs="12" sm="5">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar>
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ChildCare" Size="Size.Large" />
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Login</MudText>
                        <MudText Typo="Typo.body2">Preencha os campos e clique em "Logar"</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudMenu Icon="@Icons.Material.Filled.Settings"
                                 Color="Color.Default"
                                 AriaLabel="Abrir menu do login">
                            <MudMenuItem>Logar com cpf</MudMenuItem>
                            <MudMenuItem>Logar com telefone</MudMenuItem>
                            <MudMenuItem>Utilizar minha conta do google</MudMenuItem>
                        </MudMenu>
                    </CardHeaderActions>
                </MudCardHeader>

                <MudCardContent>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Login" For="@(() => model.Login)" />
                    <MudTextField Label="Senha" HelperText="Digite sua senha" Class="mt-3"
                                  @bind-Value="model.Password"
                                  For="@(() => model.Password)"
                                  Immediate="true"
                                  InputType="@PasswordInput"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="ButtonTestclick"
                                  AdornmentAriaLabel="Exibir a senha" />
                </MudCardContent>
                <MudCardActions Class="d-flex justify-end flex-grow-1 gap-4">
                    <div class="col-5">
                        <MudButton Href="register" Variant="Variant.Text" Color="Color.Info" Class="ml-auto">Castrar-se</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Logar</MudButton>
                    </div>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private InputLoginRequest model { get; set; } = new();
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    bool isShow;

    private void ButtonTestclick()
    {
        @if(isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        await _loginViewModel.AuthenticateUserAsync((InputLoginRequest)context.Model);
    }
}