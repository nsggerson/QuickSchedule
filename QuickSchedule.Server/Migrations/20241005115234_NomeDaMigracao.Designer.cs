// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickSchedule.Server.Context;

#nullable disable

namespace QuickSchedule.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241005115234_NomeDaMigracao")]
    partial class NomeDaMigracao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuickSchedule.Shared.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("QuickSchedule.Shared.Models.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactID"));

                    b.Property<int>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("ContactValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWhatsApp")
                        .HasColumnType("bit");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.HasKey("ContactID");

                    b.HasIndex("RecordID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("QuickSchedule.Shared.Models.Record", b =>
                {
                    b.Property<int>("RecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RecordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taxpayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxpayerType")
                        .HasColumnType("int");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UniqueCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RecordID");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("QuickSchedule.Shared.Models.RecordAddress", b =>
                {
                    b.Property<int>("RecordAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordAddressID"));

                    b.Property<string>("AddressComplement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.HasKey("RecordAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("RecordID");

                    b.ToTable("RecordAddresses");
                });

            modelBuilder.Entity("QuickSchedule.Shared.Models.Contact", b =>
                {
                    b.HasOne("QuickSchedule.Shared.Models.Record", "Record")
                        .WithMany("Contacts")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("QuickSchedule.Shared.Models.RecordAddress", b =>
                {
                    b.HasOne("QuickSchedule.Shared.Models.Address", "Address")
                        .WithMany("RecordAddresses")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickSchedule.Shared.Models.Record", "Record")
                        .WithMany("RecordAddresses")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("QuickSchedule.Shared.Models.Address", b =>
                {
                    b.Navigation("RecordAddresses");
                });

            modelBuilder.Entity("QuickSchedule.Shared.Models.Record", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("RecordAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
